import streamlit as st
import pandas as pd
import numpy as np
import time
import csv
from PIL import Image

st.set_page_config(
    page_title="Otimiza√ß√£o da Aloca√ß√£o de Tutores CODE",
    page_icon="üßëüèΩ‚Äçüíª",
    layout="wide" 
    )

if 'current_page' not in st.session_state:
    st.session_state.current_page = 'home'

# --- BARRA LATERAL COM BOT√ïES ---
with st.sidebar:
    st.header("Menu")
    
    # Atualiza o estado da sess√£o com base no bot√£o clicado
    if st.button("In√≠cio", width="stretch"):
        st.session_state.current_page = 'home'

    if st.button("Configura√ß√µes", width="stretch"):
        st.session_state.current_page = 'config'

    if st.button("Informa√ß√µes", width="stretch"):
        st.session_state.current_page = 'info'
        
    st.info("Projeto de Trabalho de Conclus√£o de Curso do discente Ezequiel Teot√¥nio J√≥.")

# --- DECLARA√á√ÉO DAS P√ÅGINAS ---
# ------------------ HOME ------------------
if st.session_state.current_page == "home":

    col1, col2, col3 = st.columns([1, 10, 1])

    with col2:
        # Adicionando imagem do projeto CODE
        try:
            banner = Image.open("code-programacao.png")
            st.image(banner, width="stretch")
        except FileNotFoundError:
            st.error("Imagem do projeto n√£o encontrada!")

        st.markdown("<h1 style='text-align: center; color: #eb8334;'>Otimiza√ß√£o da Aloca√ß√£o de Tutores CODE</h1>", unsafe_allow_html=True)
        st.markdown("<p style='text-align: center;'>Uma ferramenta que otimiza a aloca√ß√£o dos tutores √†s escolas do projeto.</p>", unsafe_allow_html=True)
        #st.markdown("<p style='text-align: center;'>Projeto de Trabalho de Conclus√£o de Curso do discente Ezequiel Teot√¥nio J√≥.</p>", unsafe_allow_html=True)

        # A coluna do meio (btn_col2) ser√° onde colocaremos o bot√£o.
        btn_col1, btn_col2, btn_col3 = st.columns([2, 1, 2]) 

        with btn_col2:
            # Simula√ß√£o de um processo de otimiza√ß√£o   
            if st.button("Otimizar", width="content"):
                with st.spinner("Otimizando... Por favor, aguarde."):
                    time.sleep(3)
                    #st.success("Otimiza√ß√£o conclu√≠da!", icon="‚úÖ")
                        
        # Exibir resultados simulados no arquivo 'resultados.csv'
        st.subheader("Resultados da Otimiza√ß√£o")
        try:
            alocacao = pd.read_csv("alocacoes.csv")
            st.dataframe(alocacao)
        except FileNotFoundError:
            st.error("Arquivo 'alocacoes.csv' n√£o encontrado!")

# ------------------ CONFIGURA√á√ïES ------------------
if st.session_state.current_page == "config":

    st.markdown("<h1 style='text-align: center; color: #eb8334;'>Configura√ß√µes</h1>", unsafe_allow_html=True)
    st.markdown("<p style='text-align: center;'>Configure os par√¢metros do algoritmo.</p>", unsafe_allow_html=True)
    st.markdown("<p style='text-align: center;'>Para mais informa√ß√µes consulte a p√°gina de Informa√ß√µes.</p>", unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns([1, 5, 5, 1])

    with col2:
        st.markdown("##### Arquivos de Entrada")
        st.markdown("Fa√ßa o upload dos arquivos CSV contendo os dados dos tutores e das escolas:")
        tutors_file = st.file_uploader("Upload do arquivo de Tutores (CSV)", type=["csv"], key="tutors_uploader")

        if tutors_file is not None:
            try:
                tutors_df = pd.read_csv(tutors_file)
                st.success("Arquivo de Tutores carregado com sucesso!", icon="‚úÖ")
                #st.dataframe(tutors_df.head())
            except Exception as e:
                st.error(f"Erro ao ler o arquivo de Tutores: {e}")

        schools_file = st.file_uploader("Upload do arquivo de Escolas (CSV)", type=["csv"], key="schools_uploader")
        if schools_file is not None:
            try:
                schools_df = pd.read_csv(schools_file)
                st.success("Arquivo de Escolas carregado com sucesso!", icon="‚úÖ")
                #st.dataframe(schools_df.head())
            except Exception as e:
                st.error(f"Erro ao ler o arquivo de Escolas: {e}")

    with col3: 
        st.markdown("##### Par√¢metros do Algoritmo de Otimiza√ß√£o")
        st.markdown("Ajuste os par√¢metros que influenciam a aloca√ß√£o dos tutores √†s escolas:")

        pref1 = st.number_input("Pontua√ß√£o da 1¬∫ Prefer√™ncia de Escola:", min_value=0, value= 8000, icon="ü•á")
        #st.write("Primeira Prefer√™ncia:", pref1)

        pref2 = st.number_input("Pontua√ß√£o da 2¬∫ Prefer√™ncia Escola:", min_value=0, value= 7000, icon="ü•à")
        #st.write("Primeira Prefer√™ncia:", pref2)

        pref3 = st.number_input("Pontua√ß√£o da 3¬∫ Prefer√™ncia Escola:", min_value=0, value= 6000, icon="ü•â")
        #st.write("Primeira Prefer√™ncia:", pref3)

        baseDistance = st.number_input("Pontua√ß√£o Base da Prefer√™ncia por Dist√¢ncias:", min_value=0, value= 5000, icon="üó∫Ô∏è")

        baseRanking = st.number_input("Pontua√ß√£o Base para o Ranking dos Tutores:", min_value=0, value= 1000000000, icon="üèÜ")

        decayType = 'sigmoid'

        st.markdown("###### Tipo de Decaimento da Pontua√ß√£o por Dist√¢ncia:")
        # Cria um seletor de r√°dio na horizontal
        decayOptions = ['Sigmoide', 'Linear']
        decayType = st.radio(
            "Escolha o tipo de decaimento:", 
            options=decayOptions, 
            horizontal=True, 
            label_visibility="collapsed",
            width="stretch"
        )

        if decayType == 'Sigmoide':
            decayType = 'sigmoid'
        else:
            decayType = 'linear'

        sigmoidCurve = st.number_input("Escala de Inclina√ß√£o da Curva Sigmoide:", min_value=0, value=2000, icon="üìâ")

    #st.write("Configura√ß√µes: ", pref1, "/", pref2, "/", pref3, "/", baseDistance, "/", baseRanking, "/", decayType, "/", sigmoidCurve)

# ------------------ INFORMA√á√ïES ------------------
if st.session_state.current_page == "info":
    st.markdown("<h1 style='text-align: center; color: #eb8334;'>Informa√ß√µes</h1>", unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 10, 1])

    with col2:
        st.markdown("### Sobre o Projeto")
        st.markdown("""
        Este projeto visa otimizar a aloca√ß√£o de tutores √†s escolas do projeto CODE, utilizando um algoritmo que considera as prefer√™ncias dos tutores, suas classifica√ß√µes e a dist√¢ncia at√© as escolas.
        """)

        st.markdown("### Par√¢metros do Algoritmo")
        st.markdown("""
        - **Prefer√™ncias dos Tutores:** Cada tutor pode indicar suas prefer√™ncias por at√© tr√™s escolas. A pontua√ß√£o atribu√≠da a cada prefer√™ncia pode ser configurada na p√°gina de Configura√ß√µes.
        - **Dist√¢ncia at√© as Escolas:** A dist√¢ncia entre a localiza√ß√£o do tutor e a escola influencia a pontua√ß√£o. A pontua√ß√£o base e o tipo de decaimento (sigmoide ou linear) podem ser ajustados.
        - **Classifica√ß√£o dos Tutores:** A classifica√ß√£o dos tutores no sistema CODE tamb√©m afeta a pontua√ß√£o. Uma pontua√ß√£o base para o ranking pode ser definida.
        """)

        st.markdown("### Como Utilizar")
        st.markdown("""
        1. Navegue at√© a p√°gina de Configura√ß√µes para enviar os arquivos CSV dos tutores e das escolas, e ajustar os par√¢metros do algoritmo.
        2. Retorne √† p√°gina inicial e clique no bot√£o 'Otimizar' para executar o algoritmo de aloca√ß√£o.
        3. Ap√≥s a conclus√£o, os resultados da otimiza√ß√£o ser√£o exibidos em uma tabela.
        """)